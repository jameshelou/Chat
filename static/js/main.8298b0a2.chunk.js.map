{"version":3,"sources":["staticData.js","components/Splash/Splash.js","reducers/userReducer.js","reducers/contactsReducer.js","reducers/messagesReducer.js","reducers/index.js","reducers/activeChatUserIdReducer.js","actions/actionTypes.js","reducers/typingReducer.js","store/store.js","components/Header/Header.js","components/Message/Message.js","components/Messages/Messages.js","containers/MessageInput/MessageInput.js","actions/actions.js","containers/ChatWindow/ChatWindow.js","components/Main/Main.js","containers/User/User.js","components/Sidebar/Sidebar.js","containers/App.js","serviceWorker.js","index.js","containers/MessageInput/MessageInput.module.css","components/Messages/Messages.module.css","containers/ChatWindow/ChatWindow.module.css","components/Main/Main.module.css","components/Splash/Splash.module.css","components/Sidebar/Sidebar.module.css","components/Header/Header.module.css","containers/User/User.module.css","components/Message/Message.module.css"],"names":["numberOfUsers","Splash","props","user","name","profile_pic","status","first_name","split","className","styles","src","alt","Splash__profilePic","Splash__status","Splash__button","Splash__helperText","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","findName","email","internet","avatar","generate","initialState","intialState","combineReducers","state","activeChatUserId","action","type","payload","msg","userId","Number","keys","pop","typing","store","createStore","reducer","Header","activeUser","Header__img","Header__infoSection","Header__name","Header__status","Message","msgClass","isUserMsg","Message__user","Message__notUser","content","Messages","messagesRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","activeMsgs","map","message","key","MessageInput","onSubmit","e","preventDefault","value","getState","dispatch","MessageInput__textField","onChange","target","placeholder","ChatWindow","values","Main","User","onClick","userClickedHandler","User__pic","User__details","User__name","User__status","Sidebar","contact","App","Boolean","window","location","hostname","match","render","console","log","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.8298b0a2.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({\n    length: numberOfUsers\n  }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({\n    length: numberOfMsgs\n  }, (v, i) => generateMsg(i));\n}","import React from 'react';\n\nimport styles from './Splash.module.css';\n\nconst Splash = props => {\n  const { name, profile_pic, status } = props.user;\n  const first_name = name.split(\" \")[0];\n\n  return (\n    <div className={styles.Splash}>\n      <h1>Hey, {first_name}</h1>\n      <img src={profile_pic} alt={name} className={styles.Splash__profilePic} />\n      <p className={styles.Splash__status}>\n        <strong>Status:</strong> {status}\n      </p>\n      <button className={styles.Splash__button}>Start a conversation</button>\n      <p className={styles.Splash__helperText}>\n        Search for someone to start chatting with or choose a contact from the right\n      </p>\n    </div>\n  );\n}\n\nexport default Splash;","import { generateUser } from '../staticData';\n\nconst initialState = generateUser();\n\nexport default (state = initialState, action) => {\n  return state;\n}","import { contacts } from '../staticData';\n\nconst initialState = contacts;\n\nexport default (state = initialState, action) => {\n  return state;\n};","import { getMessages } from '../staticData';\nimport { SEND_MSG } from '../actions/actionTypes';\nimport _ from 'lodash';\n\nconst intialState = getMessages(30);\n\nexport default (state = intialState, action) => {\n  switch (action.type) {\n    case SEND_MSG:\n      const { msg, userId } = action.payload;\n      const number = Number(_.keys(state[userId]).pop()) + 1;\n\n      return {\n        ...state,\n        [userId]: {\n          ...state[userId],\n          [number]: {\n            number,\n            text: msg,\n            is_user_msg: true\n          }\n        }\n      }\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport user from './userReducer';\nimport contacts from './contactsReducer';\nimport activeChatUserId from './activeChatUserIdReducer';\nimport messages from './messagesReducer';\nimport typing from './typingReducer';\n\nexport default combineReducers({\n  user,\n  contacts,\n  activeChatUserId,\n  messages,\n  typing\n});","import { SET_ACTIVE_CHAT_USER_ID } from \"../actions/actionTypes\";\n\nexport default (state = null, action) => {\n  switch (action.type) {\n    case SET_ACTIVE_CHAT_USER_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n};","export const SET_ACTIVE_CHAT_USER_ID = 'SET_ACTIVE_CHAT_USER_ID';\nexport const SET_TYPING_VALUE = 'SET_TYPING_VALUE';\nexport const SEND_MSG = 'SEND_MSG';","import { SET_TYPING_VALUE, SEND_MSG } from \"../actions/actionTypes\";\n\nconst initialState = '';\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TYPING_VALUE:\n      return action.payload;\n    case SEND_MSG:\n      return \"\";\n    default:\n      return state;\n  }\n};","import { createStore } from 'redux';\nimport reducer from '../reducers/index';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport styles from './Header.module.css'\n\nconst Header = props => {\n  return (\n    <div className={styles.Header}>\n      <img src={props.activeUser.profile_pic} className={styles.Header__img} alt={'active user profile pic'}/>\n\n      <div className={styles.Header__infoSection}>\n        <h1 className={styles.Header__name}>{props.activeUser.name}</h1>\n        <p className={styles.Header__status}>{props.activeUser.status}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport styles from './Message.module.css';\n\nconst Message = props => {\n  const msgClass = props.isUserMsg ? styles.Message__user : styles.Message__notUser;\n  return (\n    <div className={`${styles.Message} ${msgClass}`}>\n      {props.content}\n    </div>\n  );\n}\n\nexport default Message;","import React, { useRef, useEffect } from 'react';\nimport Message from '../Message/Message';\nimport styles from './Messages.module.css';\n\nconst Messages = props => {\n  const messagesRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n  }\n  \n  useEffect(() => {\n    scrollToBottom();\n  })\n\n  return (\n    <div className={styles.Messages} ref={messagesRef}>\n      {props.activeMsgs.map(message => \n        <Message content={message.text} isUserMsg={message.is_user_msg} key={message.number}/>)}\n    </div>\n  );\n}\n\nexport default Messages;","import React from 'react';\nimport store from '../../store/store';\nimport styles from './MessageInput.module.css';\nimport {\n  setTypingValue,\n  sendMessage\n} from '../../actions/actions';\n\nconst MessageInput = props => {\n  const messageInputHandler = e => {\n    store.dispatch(setTypingValue(e.target.value))\n  }\n\n  const messageSubmitHandler = e => {\n    e.preventDefault();\n    \n    if (props.value !== \"\") {\n      const {typing, activeChatUserId} = store.getState();\n      store.dispatch(sendMessage(typing, activeChatUserId));\n    }\n  }\n\n  return (\n    <form className={styles.MessageInput} onSubmit={messageSubmitHandler}>\n      <input \n        className={styles.MessageInput__textField}\n        onChange={messageInputHandler}\n        value={props.value}\n        placeholder='write a message...'/>\n    </form>\n  );\n};\n\nexport default MessageInput;","import {\n  SET_ACTIVE_CHAT_USER_ID,\n  SET_TYPING_VALUE,\n  SEND_MSG\n} from './actionTypes';\n\nexport const setActiveChatUserId = id => ({\n  type: SET_ACTIVE_CHAT_USER_ID,\n  payload: id\n});\n\nexport const setTypingValue = value => ({\n  type: SET_TYPING_VALUE,\n  payload: value\n});\n\nexport const sendMessage = (msg, userId) => ({\n  type: SEND_MSG,\n  payload: {\n    msg,\n    userId\n  }\n});","import React from 'react';\nimport _ from 'lodash';\nimport store from '../../store/store';\nimport Header from '../../components/Header/Header';\nimport Messages from '../../components/Messages/Messages';\nimport MessageInput from '../MessageInput/MessageInput';\nimport styles from './ChatWindow.module.css';\n\nconst ChatWindow = props => {\n  const state = store.getState();\n  const activeUser = state.contacts[props.activeChatUserId];\n  const activeMsgs = state.messages[props.activeChatUserId];\n  const typing = state.typing;\n\n  return (\n    <div className={styles.ChatWindow}>\n      <Header activeUser={activeUser} />\n      <Messages activeMsgs={_.values(activeMsgs)} />\n      <MessageInput value={typing}/>\n    </div>\n  );\n}\n\nexport default ChatWindow;","import React from 'react';\nimport Splash from '../Splash/Splash';\nimport ChatWindow from '../../containers/ChatWindow/ChatWindow';\nimport styles from './Main.module.css';\n\nconst Main = props => {\n  return (\n    <main className={styles.Main}>\n      {!props.activeChatUserId \n      ? <Splash user={props.user} /> \n      : <ChatWindow activeChatUserId={props.activeChatUserId}/>}\n    </main>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport store from '../../store/store';\nimport { setActiveChatUserId } from '../../actions/actions';\n\nimport styles from './User.module.css';\n\nconst User = props => {\n  const { name, status, profile_pic } = props.user;\n\n  const userClickedHandler = user => {\n    store.dispatch(setActiveChatUserId(user.user_id));\n  }\n\n  return (\n    <div className={styles.User} onClick={user => userClickedHandler(props.user)}>\n      <img src={profile_pic} alt={name} className={styles.User__pic} />\n      <div className={styles.User__details}>\n        <p className={styles.User__name}>{name}</p>\n        <p className={styles.User__status}>{status}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default User;","import React from 'react';\nimport User from '../../containers/User/User';\n\nimport styles from './Sidebar.module.css';\n\nconst Sidebar = props => {\n  \n  return (\n    <aside className={styles.Sidebar}>\n      {props.contacts.map(contact => \n        <User user={contact} key={contact.user_id}/>)}\n    </aside>\n  );\n}\n\nexport default Sidebar;","import React from 'react';\nimport _ from 'lodash';\nimport Main from '../components/Main/Main'\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport store from '../store/store';\nimport './App.css';\n\nconst App = () => {\n  const { contacts, activeChatUserId, user } = store.getState();\n\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)}/>\n      <Main user={user} activeChatUserId={activeChatUserId}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nconst render = () => {\n  reduxLog();\n  ReactDOM.render(<App />, document.getElementById('root'))\n};\n\nrender();\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction reduxLog() {\n  console.log(\"%c Rendered with...\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageInput\":\"MessageInput_MessageInput__3ZxEm\",\"MessageInput__textField\":\"MessageInput_MessageInput__textField__zerWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Messages_Messages__2D-Ym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatWindow\":\"ChatWindow_ChatWindow__2xIXt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__CYWXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Splash\":\"Splash_Splash__1CG2X\",\"Splash__profilePic\":\"Splash_Splash__profilePic__3J3Lk\",\"Splash__status\":\"Splash_Splash__status__1Jwwc\",\"Splash__button\":\"Splash_Splash__button__1vjjI\",\"Splash__helperText\":\"Splash_Splash__helperText__3-L9G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__2ajNT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"Header__img\":\"Header_Header__img__3K-u3\",\"Header__infoSection\":\"Header_Header__infoSection__2CSFh\",\"Header__name\":\"Header_Header__name__3bk1f\",\"Header__status\":\"Header_Header__status__3CNQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"User\":\"User_User__wQH9r\",\"User__pic\":\"User_User__pic__3_9Pk\",\"User__details\":\"User_User__details__2H0ZC\",\"User__name\":\"User_User__name__1-UMK\",\"User__status\":\"User_User__status__1wZtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__L9LXR\",\"Message__user\":\"Message_Message__user__2Yys3\",\"Message__notUser\":\"Message_Message__notUser__2iuTz\"};"],"sourceRoot":""}